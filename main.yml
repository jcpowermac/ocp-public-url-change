---
- name: Change OpenShift Subdomain
  hosts: masters
  gather_facts: False
  vars:
# Enable/Disable reconfigure for Kubevirt routes and oauth
    kubevirt: "true"
    master_config: /etc/origin/master/master-config.yaml
    webconfig_config: /etc/origin/master/webconsole-config.yaml
    router_command: !unsafe 'oc get pod -l router=router -n default --template "{{range .items}}{{.spec.nodeName}}{{end}}"'
  roles:
  - kwoodson.yedit
  tasks:

  - name: Wait for connection to be available
    local_action:
      module: wait_for
      host: "{{ item }}"
      state: started
      port: 22
      delay: 5
      connect_timeout: 15
      timeout: 1200
    with_items:
    - "{{ groups['nodes'] }}"

# Make sure OpenShift is available via 443 
# before moving on
  - name: Wait for OpenShift to be available
    local_action:
      module: wait_for
      host: "{{ inventory_hostname }}"
      state: started
      port: 443
      delay: 30
      connect_timeout: 15
      timeout: 600

  - name: Localhost Facts
    setup:
    delegate_to: localhost
    delegate_facts: True

# This is for the API lab so that we can curl
# without setting a path the ca or master cert
#
  - name: Fetch Master CA
    fetch:
      src: "{{ item }}"
      dest: /etc/pki/ca-trust/source/anchors/ 
      flat: True
    with_items:
      - /etc/origin/master/ca.crt

  - name: Update Trust
    local_action:
      module: command "update-ca-trust"

  - name: Get Router
    command: "{{ router_command }}"
    register: router

# TODO: Get the router a better way
  - name: Get IP Address
    uri:
      url: "http://www.opentlc.com/getip"
      return_content: True
    delegate_to: "{{ router.stdout }}"
    register: getip

  - name: Get Master Public IP Address
    uri:
      url: "http://www.opentlc.com/getip"
      return_content: True
    register: get_master_ip

  - set_fact:
      guid: "{{ hostvars['localhost'].ansible_hostname.split('-')[1] }}"

# master_cluster_public_subdomain
# Is a subdomain that represents the master public url.  This subdomain
# will be used to create a wildcard certificate.

  - name: Fetch Master Rav Cloud Config
    fetch:
      src: /etc/ravello/vm.json
      dest: /tmp/
      flat: True
    when: guid == 'repl'

  - name: Get Ravcloud hostname
    include_vars:
      file: /tmp/vm.json
      name: ravcloud
    when: guid == 'repl'

  - set_fact:
      master_cluster_public_subdomain: srv.ravcloud.com
      #openshift_master_cluster_public_hostname: "1master00-ocpv311cnvbaseline-pfz7slst.srv.ravcloud.com"
      openshift_master_cluster_public_hostname: "{{ ravcloud.fqdns[0] }}"
      openshift_master_default_subdomain: "{{ getip.content | replace('\n', '')}}.xip.io"
    when: guid == 'repl'
#
  - set_fact:
      master_cluster_public_subdomain: generic.opentlc.com
      openshift_master_cluster_public_hostname: "master00-{{ guid }}.generic.opentlc.com"
      openshift_master_default_subdomain: "apps-{{ guid }}.generic.opentlc.com"
    when: guid != 'repl'


  - set_fact:
      master_cert: "/etc/origin/master/star.{{ master_cluster_public_subdomain }}.crt"
      master_key: "/etc/origin/master/star.{{ master_cluster_public_subdomain }}.key"
      oauth:
        openshift-web-console:
            url: "https://{{ openshift_master_cluster_public_hostname }}/console/"
            configmap: webconsole-config
        openshift-console:
            url: "https://console.{{ openshift_master_default_subdomain }}/"
            configmap: console-config

  - set_fact:
      oauth:
        kubevirt-web-ui:
            url: "https://kubevirt-web-ui.{{ openshift_master_default_subdomain }}/"
            configmap: console-config
    when: kubevirt == 'true'

  - name: Update Routing Config Subdomain
    yedit:
      src: "{{ master_config }}"
      backup: True
      key: "routingConfig.subdomain"
      value: "{{ openshift_master_default_subdomain }}"

  - name: Update message of the day 
    import_role:
      name: motd

  - name: Create wildcard certificate
    command: >
            oc adm ca create-server-cert
                --signer-cert=/etc/origin/master/ca.crt
                --signer-key=/etc/origin/master/ca.key
                --signer-serial=/etc/origin/master/ca.serial.txt
                --hostnames='*.{{ master_cluster_public_subdomain }}'
                --cert={{ master_cert }}
                --key={{ master_key }}

  - name: Update Master Public URL
    yedit:
      src: "{{ master_config }}"
      backup: True
      key: "{{ item }}"
      value: "https://{{ openshift_master_cluster_public_hostname }}"
    with_items:
    - masterPublicURL
    - oauthConfig.masterPublicURL

  - name: Update Asset Public URL
    yedit:
      src: "{{ master_config }}"
      backup: False
      key: "oauthConfig.assetPublicURL"
      value: "https://{{  openshift_master_cluster_public_hostname }}/console/"


# Use named certificates for the master public url
# This leaves alone the original master certificate and will use
# the wildcard cert for the public hostname.

  - name: Named Certificates
    yedit:
      backup: False
      src: "{{ master_config }}"
      edits:
      - key:  servingInfo.namedCertificates
        value: []
      - key: servingInfo.namedCertificates
        value:
          - certFile: "{{ master_cert }}"
            keyFile: "{{ master_key }}"
            names:
              - "{{ openshift_master_cluster_public_hostname }}"

  - name: Extract oauthclients
    command: "oc -o yaml get --export oauthclients {{ item }}"
    with_items:
    - "{{ oauth.keys() | list }}"
    register: console

  - name: Edit oauthclient configuration
    yedit:
      content: "{{ item.stdout }}"
      append: True
      key: redirectURIs
      value: "{{ oauth[item.item].url }}"
    with_items:
    - "{{ console['results'] }}"
    register: updated_oauth

  - name: Create oauth file
    copy:
      content: "{{ item.result[0].edit | to_nice_yaml }}"
      dest: "/tmp/{{ item.item.item }}.yaml"
    with_items:
    - "{{ updated_oauth['results'] }}"

  - name: Replace oauthclients
    command: "oc replace -f /tmp/{{ item.item.item }}.yaml"
    with_items:
    - "{{ updated_oauth['results'] }}"


  - name: Create Directories for ConfigMaps
    file:
      path: "/tmp/{{ item }}"
      state: directory
    with_items:
    - "{{ oauth.keys() | list }}"
      

  - name: Extract Console ConfigMaps
    command: "oc extract configmap/{{ oauth[item].configmap }} -n {{ item }} --to=/tmp/{{ item }} --confirm"
    with_items:
    - "{{ oauth.keys() | list }}"
    register: configmaps

  - name: Modify Console Config
    yedit:
      src: "/tmp/{{ item }}/{{ oauth[item].configmap }}.yaml"
      edits:
      - key: clusterInfo.consoleBaseAddress
        value: "{{ oauth[item].url }}"
      - key: clusterInfo.developerConsolePublicURL
        value: "{{ oauth[item].url }}"
      - key: clusterInfo.metricsPublicURL
        value: "https://hawkular-metrics.{{ openshift_master_default_subdomain }}/hawkular/metrics"
      - key: clusterInfo.loggingPublicURL
        value: "https://kibana.{{ openshift_master_default_subdomain }}"
      - key: clusterInfo.adminConsolePublicURL
        value: "{{ oauth[item].url }}"
      - key:  clusterInfo.masterPublicURL
        value: "https://{{ openshift_master_cluster_public_hostname }}"
      - key: clusterInfo.consolePublicURL
        value: "{{ oauth[item].url }}"
    with_items:
    - "{{ oauth.keys() | list }}"

  - name: Delete Existing ConfigMaps
    command: "oc delete configmap {{ oauth[item].configmap }} -n {{ item }}"
    with_items:
    - "{{ oauth.keys() | list }}"

  - name: Recreate ConfigMaps
    command: "oc create configmap {{ oauth[item].configmap }} -n {{ item }} --from-file=/tmp/{{ item }}/{{ oauth[item].configmap }}.yaml"
    with_items:
    - "{{ oauth.keys() | list }}"

# TODO: This could be replaced with register, copy content item.stdout
  - name: Overwrite webconsole-config
    shell: "oc -o yaml get configmap webconsole-config -n openshift-web-console > /etc/origin/master/webconsole-config.yaml"

  - name: Export Routes
    command: "oc -o yaml -n {{ item.namespace }} get --export route {{ item.route }}"
    register: routes
    with_items:
    - { namespace: 'openshift-console', route: 'console' }
    - { namespace: 'openshift-infra', route: 'hawkular-metrics' }
    - { namespace: 'openshift-logging', route: 'logging-kibana' }
    - { namespace: 'openshift-monitoring', route: 'alertmanager-main' }
    - { namespace: 'openshift-monitoring', route: 'prometheus-k8s' }
    - { namespace: 'openshift-monitoring', route: 'grafana' }

  - name: Export Routes For KubeVirt
    set_fact:
      routes: "{{ routes }} + [{ namespace: 'kubevirt-web-ui', route: 'console' }]"
    when: kubevirt == 'true'

  - name: Get Hosts
    yedit:
      content: "{{ item.stdout }}"
      state: list
      key: spec.host
    register: hosts
    with_items:
    - "{{ routes.results }}"

  - name: Modify Routes
    yedit:
      content: "{{ item.item.stdout }}"
      key: spec.host
      value: "{{ item.result.split('.')[0] }}.{{ openshift_master_default_subdomain }}"
    register: new_routes
    with_items:
    - "{{ hosts.results }}"

  - name: Create namespace directories
    file:
      path: "/tmp/{{ item.item.item.item.namespace }}" 
      state: directory
    with_items:
    - "{{ new_routes.results }}"

  - name: Create Route manifests
    copy:
      content: "{{ item.result[0].edit | to_nice_yaml }}"
      dest: "/tmp/{{ item.item.item.item.namespace }}/{{ item.item.item.item.route }}.yaml"
    when: item is changed
    with_items:
    - "{{ new_routes.results }}"

  - name: Replace Routes
    command: "oc replace -f /tmp/{{ item.item.item.item.namespace }}/{{ item.item.item.item.route }}.yaml -n {{ item.item.item.item.namespace }}"
    when: item is changed
    with_items:
    - "{{ new_routes.results }}"

  - name: Restart Master
    command: "/usr/local/bin/master-restart {{ item }}"
    with_items:
    - "api"
    - "controllers"

  - name: Wait for OpenShift to be available
    local_action:
      module: wait_for
      host: "{{ inventory_hostname }}"
      state: started
      port: 443
      delay: 30
      connect_timeout: 15
      timeout: 600

  - name: Delete Console Pods
    command: "oc delete pod --all -n {{ item }}"
    with_items:
    - "{{ oauth.keys() | list }}"

  - name: Regenerate Prometheus Configuration
    command: "{{ item }}"
    with_items:
    - "oc delete secret --field-selector type=Opaque -n openshift-monitoring"
    - "oc delete secret --field-selector type=kubernetes.io/tls -n openshift-monitoring"
    - "oc delete pod --all -n openshift-monitoring"

# Replace the router certificates and use the new openshift_master_default_subdomain
- import_playbook: /usr/share/ansible/openshift-ansible/playbooks/openshift-hosted/redeploy-router-certificates.yml
